import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

// Interface for Event Management
interface EventOperations {
    void registerEvent();
    void displayEvent();
}

// Abstract class
abstract class ArtEvent implements EventOperations {
    String eventName, date, venue;
    int maxParticipants;

    ArtEvent(String eventName, String date) {
        this.eventName = eventName;
        this.date = date;
    }

    ArtEvent(String eventName, String date, String venue, int maxParticipants) {
        this(eventName, date);
        this.venue = venue;
        this.maxParticipants = maxParticipants;
    }

    abstract void showDetails();
}

// Inheriting from ArtEvent
class PaintingEvent extends ArtEvent {
    String theme;

    PaintingEvent(String eventName, String date, String venue, int maxParticipants, String theme) {
        super(eventName, date, venue, maxParticipants);
        this.theme = theme;
    }

    @Override
    void showDetails() {
        System.out.println("Painting Event: " + eventName + " | Date: " + date + " | Venue: " + venue + " | Theme: " + theme);
    }

    @Override
    public void registerEvent() {
        System.out.println("Event registered successfully!");
    }

    @Override
    public void displayEvent() {
        showDetails();
    }
}

// Main class
public class ArtEventManagementSystem {
    static Connection conn;
    static JFrame frame;
    static JTextField eventNameField, dateField, venueField, themeField, maxParticipantsField;
    static JTextArea displayArea;

    // Establish Database Connection
    public static void connectDB() {
    try {
        // Load MySQL JDBC Driver
        Class.forName("com.mysql.cj.jdbc.Driver");

        // Establish Connection
        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/art_events?useSSL=false&allowPublicKeyRetrieval=true", 
                                           "root", "123456");
        System.out.println("Connected to database.");
    } catch (ClassNotFoundException e) {
        System.out.println("MySQL JDBC Driver not found! " + e.getMessage());
    } catch (SQLException e) {
        System.out.println("Database Connection Error: " + e.getMessage());
    }
}


    // Insert Event into Database
    public static void insertEventToDB(PaintingEvent event) {
        try {
            PreparedStatement stmt = conn.prepareStatement("INSERT INTO events (name, date, venue, maxParticipants, theme) VALUES (?, ?, ?, ?, ?)");
            stmt.setString(1, event.eventName);
            stmt.setString(2, event.date);
            stmt.setString(3, event.venue);
            stmt.setInt(4, event.maxParticipants);
            stmt.setString(5, event.theme);
            stmt.executeUpdate();
            System.out.println("Event inserted successfully.");
        } catch (SQLException e) {
            System.out.println("Error inserting event: " + e.getMessage());
        }
    }

    // GUI Implementation using Swing
    public static void createGUI() {
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (Exception ignored) {}

        frame = new JFrame("üé® Art Event Management System üé≠");
        frame.setSize(550, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new GridBagLayout());
        frame.getContentPane().setBackground(new Color(45, 52, 54)); // Dark background

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;

        Font labelFont = new Font("Arial", Font.BOLD, 14);
        Color labelColor = new Color(255, 229, 180); // Light Yellow

        String[] labels = {"Event Name:", "Date (YYYY-MM-DD):", "Venue:", "Max Participants:", "Theme:"};
        JTextField[] fields = {eventNameField = new JTextField(), dateField = new JTextField(), venueField = new JTextField(), maxParticipantsField = new JTextField(), themeField = new JTextField()};

        for (int i = 0; i < labels.length; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            JLabel label = new JLabel(labels[i]);
            label.setFont(labelFont);
            label.setForeground(labelColor);
            frame.add(label, gbc);

            gbc.gridx = 1;
            frame.add(fields[i], gbc);
        }

        JButton addButton = new JButton("‚ûï Add Event");
        addButton.setBackground(new Color(255, 87, 51)); // Orange Button
        addButton.setForeground(Color.WHITE);
        addButton.setFont(new Font("Arial", Font.BOLD, 14));
        addButton.setFocusPainted(false);
        addButton.setBorder(BorderFactory.createRaisedBevelBorder());

        gbc.gridx = 0;
        gbc.gridy = labels.length;
        gbc.gridwidth = 2;
        frame.add(addButton, gbc);

        displayArea = new JTextArea(5, 30);
        displayArea.setEditable(false);
        displayArea.setBackground(new Color(236, 240, 241)); // Light Gray
        displayArea.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));

        gbc.gridx = 0;
        gbc.gridy = labels.length + 1;
        gbc.gridwidth = 2;
        frame.add(new JScrollPane(displayArea), gbc);

        addButton.addActionListener(e -> {
            String name = eventNameField.getText();
            String date = dateField.getText();
            String venue = venueField.getText();
            String maxParticipants = maxParticipantsField.getText();
            String theme = themeField.getText();

            if (name.isEmpty() || date.isEmpty() || venue.isEmpty() || maxParticipants.isEmpty() || theme.isEmpty()) {
                JOptionPane.showMessageDialog(frame, "‚ùå All fields are required!", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!date.matches("\\d{4}-\\d{2}-\\d{2}")) {
                JOptionPane.showMessageDialog(frame, "‚ùå Invalid date format! Use YYYY-MM-DD.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int participants;
            try {
                participants = Integer.parseInt(maxParticipants);
                if (participants <= 0) {
                    JOptionPane.showMessageDialog(frame, "‚ùå Max participants must be greater than 0.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(frame, "‚ùå Max participants must be a valid number.", "Validation Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            PaintingEvent event = new PaintingEvent(name, date, venue, participants, theme);
            insertEventToDB(event);
            displayArea.setText("‚úÖ Event Added:\n" + "üé® Name: " + name + "\nüìÖ Date: " + date + "\nüìç Venue: " + venue + "\nüë• Max Participants: " + participants + "\nüé≠ Theme: " + theme);
        });

        frame.setVisible(true);
    }

    public static void main(String[] args) {
        connectDB();
        createGUI();
    }
}
